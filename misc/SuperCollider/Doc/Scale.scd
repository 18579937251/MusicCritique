a = Scale.major;
a.degrees;
a.semitones;
a.cents;
a.ratios;

Pbind(\scale, a, \degree, Pseq((0..7) ++ (6..0) ++ [\rest], 1), \dur, 0.25).play;

a.tuning_(\just);
a.degrees;
a.semitones;
a.ratios.collect(_.round(0.001));

Pbind(\scale, a, \degree, Pseq((0..7) ++ (6..0) ++ [\rest], 1), \dur, 0.25).play;

Scale.phrygian(\pythagorean);
Scale.directory; // complete list of available scales
Scale.at(\chinese);

Scale.all.put(\catastrophic, Scale([0, 0.01, 0.04, 11.2]));
Scale.at(\catastrophic);

Scale.at(\ionian);
Scale.newFromKey(\ionian); // access a copy of the scale for modification

Scale.choose; // Creates a random scale from the library
Scale.choose(7); // Choose a random seven-note scale in its default tuning
Scale.choose(7, 12); // ChooseÂ·a seven-note scale in a twelve-tone tuning

// Create a Scale from scratch. Degrees should be an array of Integers or scale name. If pitchesPerOctave is nil, will guess the most appropriate number based on degrees. tuning can be an instance of Tuning or a symbol; if nil, will be equal temperament of pitchesPerOctave. Specify descDegrees if the Scale should play differently when descending than when ascending.
Scale.new(#[0, 1, 3, 6, 8, 10, 11], name: "My ET12");
Scale.new(#[0, 3, 7, 10, 15, 19, 22], name: "My Quarter-Tone");
Scale.new(#[0, 6, 17, 21, 30, 39], 43, \partch, "My Partch");

(
r = {
	var scale = Scale.choose.postln;
	SinOsc.ar(
		(
			DegreeToKey.kr(
				scale.as(LocalBuf), // converting
				MouseX.kr(0.15), // mouse indexes into scale
				scale.stepsPerOctave,
				1, // mul = 1
				60 // offset by 72 notes
			)
			+ LFNoise1.kr([3, 3], 0.04) // add some low freq stereo detuning
		).midicps,  // convert midi notes to hertz
		0,
		0.25
	)
}.play;
)

Scale.ionian.size;
Scale.minorPentatonic.size;
Scale.ajam.size;
Scale.partch_o1.size;
// Returns the length of the scale

Scale.ionian.pitchesPerOctave;
Scale.minorPentatonic.pitchesPerOctave;
Scale.ajam.pitchesPerOctave;
Scale.partch_o1.pitchesPerOctave;
// Returns the size of the pitch class set from which the tuning is drawn.

Scale.new((0..14), 15, tuning: \wcAlpha).stepsPerOctave;
Scale.new(#[0, 3, 6, 9, 12], 13, tuning: \bp).stepsPerOctave;
// Usually 12, but may be different if the current tuning has a stretched or compressed octave.

a = Scale.major;
a.wrapAt(4);
a.wrapAt(5);
a.wrapAt(6);
a.wrapAt(7);
// Acceses the array generated by semitones.

Scale.major.degreeToFreq(2, 60.midicps, 1);
Scale.major(\just).degreeToFreq(2, 60.midicps, 1);
// Returns a frequency based on current tuning and rootFreq argument

Scale.major.degreeToRatio(2, 1).round(0.001);
Scale.major(\just).degreeToRatio(2, 1).round(0.001);
